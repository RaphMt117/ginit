export const langs = ["Node", "Typescript", "Bash", "Go"];

export const mainMessage = {
  Node: `console.log("Hello, world!")`,
  Typescript: "Hello typescript",
  Bash: "#!/usr/bin/env bash",
  Go: `package main

import "fmt"

func main() {
    fmt.Println("Hello, world.")
}`,
};
export const gitignoreContent = {
  Node: `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
    `,
  Typescript: `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
    `,
  Bash: `# macOS
._*
.DS_Store
.LSOverride
# Icon must end with two carriage returns (\r)
Icon

# Windows
[Dd]esktop.ini
ehthumbs.db
ehthumbs_vista.db
[Tt]humbs.db

# Backups
*.bak

# Logs
*.log
log/
logs/

# Temporary
*~
*.tmp
*.temp
tmp/
temp/

# Vim
.netrwhist
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]*.un~
[._]s[a-rt-v][a-z]
[._]ss[a-gi-z]
[._]sw[a-p]
`,
  Go: `# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work
`,
};

export const readmeContent = {
  Node: `<div align="center">
  <img src="https://cdn.svgporn.com/logos/nodejs.svg" width="100" alt="Logo"/><br/>
  <h1 align="center">
    projectName
  </h1>
</div>

<p align="center">
  <!-- Badges from [Shields.io](https://img.shields.io/)  -->
  <a href="https://github.com/{user}/{project}"><img src="https://img.shields.io/github/languages/top/{user}/{project}?colorA=363a4f&colorB=f5a97f&style=for-the-badge"></a>
  <a href="https://github.com/{user}/{project}"><img src="https://img.shields.io/github/repo-size/{user}/{project}?colorA=363a4f&colorB=b7bdf8&style=for-the-badge"></a>
  <a href="https://github.com/{user}/{project}/commits"><img src="https://img.shields.io/github/commit-activity/m/{user}/{project}?colorA=363a4f&colorB=a6da95&style=for-the-badge"></a>
</p>

## What is it?

-
-
-

## Showcase

<p align="center">
  <img src="path/to/sreenshot"/>
</p>

## Usage

1. Make sure you have node.js installed:

\`\`\`bash
node --version
\`\`\`

2. Run the following command:

\`\`\`bash
npx { projectName }
\`\`\`

> NPX allows you to run and use packages without having to install them locally or globally.
> You can learn more [here](https://www.npmjs.com/package/npx)

## specificFuntionality

<p align="center">
  <img src="path/to/sreenshot"/>
  <img src="path/to/sreenshot"/>
  <img src="path/to/sreenshot"/>
</p>

## ðŸ™‹ FAQ

<!-- - Q: **"What is \`npx\`?"** -->

  <!-- NPX is a tool included in NPM, and allows you to run and use packages without needing to locally or globally install them. -->
  <!-- If a package is installed while running NPM executables with NPX, NPX will look for the package binaries (either locally or globally) and then run the package. -->
  <!-- Your globals remain clean in this way. As a result, you can run a package only when necessary and conserve disk space. In addition, you may test packages without having to install them, which is another benefit. -->

&nbsp;

<p align="center"><a href="https://github.com/path/to/license"><img src="https://img.shields.io/static/v1.svg?style=for-the-badge&label=License&message={license}&logoColor=d9e0ee&colorA=363a4f&colorB=b7bdf8"/></a></p>

`,
  Typescript: `# Typescript Readme Template

some content lalala
`,
  Bash: `# Bash Readme Template

some content lalala
`,
  Go: `# Go Readme Template

some content lalala
`,
  Other: `Default README content`,
};
